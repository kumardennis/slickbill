create table "public"."tickets" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "title" text,
    "description" text,
    "dateOfActivity" date,
    "category" text,
    "qrCodeLink" text,
    "privateUserId" bigint
);


alter table "public"."tickets" enable row level security;

CREATE UNIQUE INDEX tickets_pkey ON public.tickets USING btree (id);

alter table "public"."tickets" add constraint "tickets_pkey" PRIMARY KEY using index "tickets_pkey";

alter table "public"."tickets" add constraint "tickets_privateUserId_fkey" FOREIGN KEY ("privateUserId") REFERENCES private_users(id) not valid;

alter table "public"."tickets" validate constraint "tickets_privateUserId_fkey";

grant delete on table "public"."tickets" to "anon";

grant insert on table "public"."tickets" to "anon";

grant references on table "public"."tickets" to "anon";

grant select on table "public"."tickets" to "anon";

grant trigger on table "public"."tickets" to "anon";

grant truncate on table "public"."tickets" to "anon";

grant update on table "public"."tickets" to "anon";

grant delete on table "public"."tickets" to "authenticated";

grant insert on table "public"."tickets" to "authenticated";

grant references on table "public"."tickets" to "authenticated";

grant select on table "public"."tickets" to "authenticated";

grant trigger on table "public"."tickets" to "authenticated";

grant truncate on table "public"."tickets" to "authenticated";

grant update on table "public"."tickets" to "authenticated";

grant delete on table "public"."tickets" to "service_role";

grant insert on table "public"."tickets" to "service_role";

grant references on table "public"."tickets" to "service_role";

grant select on table "public"."tickets" to "service_role";

grant trigger on table "public"."tickets" to "service_role";

grant truncate on table "public"."tickets" to "service_role";

grant update on table "public"."tickets" to "service_role";

create policy "Enable read access for all users"
on "public"."tickets"
as permissive
for all
to anon, authenticated
using (true)
with check (true);



