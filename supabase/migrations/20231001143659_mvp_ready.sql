create table "public"."business_users" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "fullName" character varying,
    "publicName" character varying,
    "address" character varying,
    "contactName" character varying,
    "contactEmail" character varying,
    "userId" bigint,
    "iban" character varying,
    "bankAccountName" character varying
);


alter table "public"."business_users" enable row level security;

create table "public"."digital_invoices" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now(),
    "senderId" bigint,
    "receiverId" bigint,
    "status" character varying not null default 'UNPAID'::character varying,
    "amount" double precision default '0'::double precision,
    "data" json,
    "description" character varying,
    "rawInvoiceId" bigint,
    "senderName" character varying,
    "deadline" date,
    "invoiceNo" character varying,
    "originalInvoiceNo" character varying,
    "isSeen" boolean default false,
    "referenceNo" character varying,
    "paidOnDate" date,
    "senderIban" character varying,
    "isObsolete" boolean default false
);


alter table "public"."digital_invoices" enable row level security;

create table "public"."private_users" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "firstName" character varying,
    "lastName" character varying,
    "userId" bigint,
    "iban" character varying,
    "bankAccountName" character varying
);


alter table "public"."private_users" enable row level security;

create table "public"."raw_invoices" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now(),
    "fileUrl" text
);


alter table "public"."raw_invoices" enable row level security;

create table "public"."receivers" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "privateUserId" bigint,
    "businessUserId" bigint
);


alter table "public"."receivers" enable row level security;

create table "public"."senders" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "privateUserId" bigint,
    "businessUserId" bigint
);


alter table "public"."senders" enable row level security;

create table "public"."users" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "username" character varying not null,
    "email" character varying,
    "authUserId" uuid
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX business_users_pkey ON public.business_users USING btree (id);

CREATE UNIQUE INDEX digital_invoices_pkey ON public.digital_invoices USING btree (id);

CREATE UNIQUE INDEX private_users_pkey ON public.private_users USING btree (id);

CREATE UNIQUE INDEX raw_invoices_pkey ON public.raw_invoices USING btree (id);

CREATE UNIQUE INDEX receivers_pkey ON public.receivers USING btree (id);

CREATE UNIQUE INDEX senders_pkey ON public.senders USING btree (id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

CREATE UNIQUE INDEX users_username_key ON public.users USING btree (username);

alter table "public"."business_users" add constraint "business_users_pkey" PRIMARY KEY using index "business_users_pkey";

alter table "public"."digital_invoices" add constraint "digital_invoices_pkey" PRIMARY KEY using index "digital_invoices_pkey";

alter table "public"."private_users" add constraint "private_users_pkey" PRIMARY KEY using index "private_users_pkey";

alter table "public"."raw_invoices" add constraint "raw_invoices_pkey" PRIMARY KEY using index "raw_invoices_pkey";

alter table "public"."receivers" add constraint "receivers_pkey" PRIMARY KEY using index "receivers_pkey";

alter table "public"."senders" add constraint "senders_pkey" PRIMARY KEY using index "senders_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."business_users" add constraint "business_users_userId_fkey" FOREIGN KEY ("userId") REFERENCES users(id) not valid;

alter table "public"."business_users" validate constraint "business_users_userId_fkey";

alter table "public"."digital_invoices" add constraint "digital_invoices_rawInvoiceId_fkey" FOREIGN KEY ("rawInvoiceId") REFERENCES raw_invoices(id) not valid;

alter table "public"."digital_invoices" validate constraint "digital_invoices_rawInvoiceId_fkey";

alter table "public"."digital_invoices" add constraint "digital_invoices_receiverId_fkey" FOREIGN KEY ("receiverId") REFERENCES receivers(id) not valid;

alter table "public"."digital_invoices" validate constraint "digital_invoices_receiverId_fkey";

alter table "public"."digital_invoices" add constraint "digital_invoices_senderId_fkey" FOREIGN KEY ("senderId") REFERENCES senders(id) not valid;

alter table "public"."digital_invoices" validate constraint "digital_invoices_senderId_fkey";

alter table "public"."private_users" add constraint "private_users_userId_fkey" FOREIGN KEY ("userId") REFERENCES users(id) not valid;

alter table "public"."private_users" validate constraint "private_users_userId_fkey";

alter table "public"."receivers" add constraint "receivers_businessUserId_fkey" FOREIGN KEY ("businessUserId") REFERENCES business_users(id) not valid;

alter table "public"."receivers" validate constraint "receivers_businessUserId_fkey";

alter table "public"."receivers" add constraint "receivers_privateUserId_fkey" FOREIGN KEY ("privateUserId") REFERENCES private_users(id) not valid;

alter table "public"."receivers" validate constraint "receivers_privateUserId_fkey";

alter table "public"."senders" add constraint "senders_businessUserId_fkey" FOREIGN KEY ("businessUserId") REFERENCES business_users(id) not valid;

alter table "public"."senders" validate constraint "senders_businessUserId_fkey";

alter table "public"."senders" add constraint "senders_privateUserId_fkey" FOREIGN KEY ("privateUserId") REFERENCES private_users(id) not valid;

alter table "public"."senders" validate constraint "senders_privateUserId_fkey";

alter table "public"."users" add constraint "users_authUserId_fkey" FOREIGN KEY ("authUserId") REFERENCES auth.users(id) not valid;

alter table "public"."users" validate constraint "users_authUserId_fkey";

alter table "public"."users" add constraint "users_username_key" UNIQUE using index "users_username_key";

create policy "Enable insert for authenticated users only"
on "public"."business_users"
as permissive
for all
to authenticated, anon
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."digital_invoices"
as permissive
for all
to authenticated, anon
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."private_users"
as permissive
for all
to authenticated, anon
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."receivers"
as permissive
for all
to authenticated, anon
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."senders"
as permissive
for all
to authenticated, anon
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."users"
as permissive
for all
to authenticated, anon
using (true)
with check (true);



